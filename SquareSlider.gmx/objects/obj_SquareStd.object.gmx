<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_squareStd</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//moving variables
ySpeed = 0;
alignSquares = false
initialX = 0
initialY = 0

//Make a random color
color = make_colour_rgb(0, 0, 255);//innitialize base color
rand_num = irandom(global.numColors) 
switch (rand_num) { //Select color based of random result
    case 0:
        color = global.blue
        break;
    case 1:
        color = global.green
        break;
    case 2:
        color = global.yellow
        break;
    case 3:
        color = global.red
        break;
    case 4:
        color = global.orange
        break;
    case 5:
        color = global.purple
        break;  }

//default row and column
row = 0
column = 0

//sets the x and y scale for the image based off the selected number of rows and collumns
image_xscale = global.squareWidth/sprite_width
image_yscale = global.squareHeight/sprite_height
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//move squares if mouse is clicked.
if global.mouseIsPressed {

    //find row and column
        row = scr_findRow(y);
        column = scr_findColumn(x);
        scr_moveSquare()
        scr_loopSquares() }
        
    //align when released
    if mouse_check_button_released(mb_left) {
        scr_alignSquares(); }
    
//Make them fall together.
depth = y;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="56">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//reset lots of global variables
global.mouseIsPressed = false
global.initMouseX = -1
global.initMouseY = -1
global.moveX = false
global.moveY = false
global.mouseRow = 0
global.mouseCol = 0
initialX = 0
initialY = 0
alignSquares = true
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.mouseIsPressed = true;

//sets the mouse row and column to move
if global.mouseRow = 0
    global.mouseRow = scr_findRow(mouse_y);
    show_debug_message(scr_findRow(mouse_y));
if global.mouseCol = 0
    global.mouseCol = scr_findColumn(mouse_x);

//sets initial mouse position to the current mouse position
if (global.initMouseX == -1) {
    global.initMouseX = mouse_x; }
if (global.initMouseY == -1) {
    global.initMouseY = mouse_y }


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//time to fall.
if !(global.mouseIsPressed) {
    scr_dropSquares() }

//time to draw.    
draw_sprite_ext(spr_squareStd, 0, x, y, image_xscale, image_yscale, 0, color, 255)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
